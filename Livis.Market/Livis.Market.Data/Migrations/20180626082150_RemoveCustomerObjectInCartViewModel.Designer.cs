// <auto-generated />
using Livis.Market.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Livis.Market.Data.Migrations
{
    [DbContext(typeof(LivisMarketContext))]
    [Migration("20180626082150_RemoveCustomerObjectInCartViewModel")]
    partial class RemoveCustomerObjectInCartViewModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Livis.Market.Data.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Livis.Market.Data.CustomerAddress", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressType");

                    b.Property<string>("CityOrTownOrVillage")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorId")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifierId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(64);

                    b.Property<string>("PostCode")
                        .HasMaxLength(64);

                    b.Property<string>("Prefecture")
                        .HasMaxLength(64);

                    b.Property<string>("StreetAndHouseNumber")
                        .HasMaxLength(64);

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Livis.Market.Data.CustomerContact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorId")
                        .IsRequired();

                    b.Property<int>("CustomerGroup");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LastOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifierId")
                        .IsRequired();

                    b.Property<Guid?>("OrganisationId");

                    b.Property<string>("OwnerId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(64);

                    b.Property<Guid?>("PreferredBillingAddressId");

                    b.Property<string>("PreferredCurrency")
                        .HasMaxLength(10);

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10);

                    b.Property<Guid?>("PreferredShippingAddressId");

                    b.HasKey("ContactId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PreferredBillingAddressId");

                    b.HasIndex("PreferredShippingAddressId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Livis.Market.Data.LevisUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsPowerUser");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Livis.Market.Data.LineItem", b =>
                {
                    b.Property<long>("LineItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("DisplayName");

                    b.Property<decimal>("ExtendedPrice");

                    b.Property<long?>("OrderFormId");

                    b.Property<long?>("OrderGroupId");

                    b.Property<decimal>("PlacedPrice");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("ReturnReason");

                    b.Property<string>("Sku");

                    b.Property<string>("VariantId");

                    b.HasKey("LineItemId");

                    b.HasIndex("OrderFormId");

                    b.HasIndex("OrderGroupId");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("Livis.Market.Data.OrderForm", b =>
                {
                    b.Property<long>("OrderFormId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AuthorizedPaymentTotal");

                    b.Property<Guid?>("BillingAddressId");

                    b.Property<decimal>("CapturedPaymentTotal");

                    b.Property<string>("Data");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<decimal>("HandlingTotal");

                    b.Property<string>("Name");

                    b.Property<long?>("OrderGroupId");

                    b.Property<string>("ReturnComment");

                    b.Property<decimal>("ShippingTotal");

                    b.Property<int>("Status");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("TaxTotal");

                    b.Property<decimal>("Total");

                    b.HasKey("OrderFormId");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("OrderGroupId");

                    b.ToTable("OrderForms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrderForm");
                });

            modelBuilder.Entity("Livis.Market.Data.OrderGroup", b =>
                {
                    b.Property<long>("OrderGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<string>("BillingCurrency");

                    b.Property<Guid?>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("Data");

                    b.Property<decimal>("HandlingTotal");

                    b.Property<Guid>("InstanceId");

                    b.Property<string>("Name");

                    b.Property<decimal>("ShippingTotal");

                    b.Property<int>("Status");

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("TaxTotal");

                    b.Property<decimal>("Total");

                    b.HasKey("OrderGroupId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderGroups");
                });

            modelBuilder.Entity("Livis.Market.Data.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountHolder");

                    b.Property<string>("AccountNumber");

                    b.Property<string>("BankName");

                    b.Property<string>("BankNumber");

                    b.Property<string>("BranchName");

                    b.Property<string>("BranchNumber");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActivateAccount");

                    b.Property<bool>("IsSendConfirmationMail");

                    b.Property<bool>("IsSendThankYouMail");

                    b.Property<string>("LastName");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longtitude");

                    b.Property<string>("OpenTime");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostCode");

                    b.Property<string>("Prefecture");

                    b.Property<string>("RegistrationStatus");

                    b.Property<string>("ShopName");

                    b.Property<string>("Street");

                    b.Property<string>("TokenConfirmationMail");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("OrganisationId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Livis.Market.Data.Party", b =>
                {
                    b.Property<Guid>("PartyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("AddressName");

                    b.Property<string>("City")
                        .HasMaxLength(64);

                    b.Property<string>("Country");

                    b.Property<string>("CountryCode");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("LastName");

                    b.Property<string>("Organization");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State");

                    b.Property<string>("StateCode");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Livis.Market.Data.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Height");

                    b.Property<decimal?>("Length");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Name");

                    b.Property<string>("OriginalLinks");

                    b.Property<string>("Prices");

                    b.Property<string>("Resources");

                    b.Property<string>("Sku");

                    b.Property<decimal>("SuggestedPrice");

                    b.Property<string>("UserId");

                    b.Property<string>("VariantKeys");

                    b.Property<string>("VariantOptions");

                    b.Property<string>("Videos");

                    b.Property<decimal?>("Weight");

                    b.Property<decimal?>("Width");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhoto", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlobUrl");

                    b.Property<Guid?>("ProductId");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhoto");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhotoForPartner", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlobUrl");

                    b.Property<Guid?>("ProductId");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotoForPartner");
                });

            modelBuilder.Entity("Livis.Market.Data.SerializableCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("CustomerId");

                    b.Property<string>("Data");

                    b.Property<string>("MarketId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("CartId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Livis.Market.Data.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactId");

                    b.Property<string>("Description");

                    b.Property<string>("StoreName");

                    b.Property<string>("UserId");

                    b.HasKey("StoreId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Livis.Market.Data.StoreProduct", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("StoreProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Livis.Market.Data.OrderFormFederatedPayment", b =>
                {
                    b.HasBaseType("Livis.Market.Data.OrderForm");

                    b.Property<Guid?>("BillingPartyPartyId");

                    b.Property<string>("CardType");

                    b.Property<string>("EscrowId");

                    b.Property<int>("ExpiresMonth");

                    b.Property<int>("ExpiresYear");

                    b.Property<string>("MaskedNumber");

                    b.Property<string>("PaymentMethodNonce");

                    b.Property<string>("TransactionId");

                    b.Property<string>("TransactionStatus");

                    b.HasIndex("BillingPartyPartyId");

                    b.ToTable("OrderFormFederatedPayment");

                    b.HasDiscriminator().HasValue("OrderFormFederatedPayment");
                });

            modelBuilder.Entity("Livis.Market.Data.CustomerContact", b =>
                {
                    b.HasOne("Livis.Market.Data.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Livis.Market.Data.LevisUser", "User")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Livis.Market.Data.CustomerAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("PreferredBillingAddressId");

                    b.HasOne("Livis.Market.Data.CustomerAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("PreferredShippingAddressId");
                });

            modelBuilder.Entity("Livis.Market.Data.LineItem", b =>
                {
                    b.HasOne("Livis.Market.Data.OrderForm", "OrderForm")
                        .WithMany()
                        .HasForeignKey("OrderFormId");

                    b.HasOne("Livis.Market.Data.OrderGroup", "OrderGroup")
                        .WithMany()
                        .HasForeignKey("OrderGroupId");
                });

            modelBuilder.Entity("Livis.Market.Data.OrderForm", b =>
                {
                    b.HasOne("Livis.Market.Data.CustomerAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Livis.Market.Data.OrderGroup", "OrderGroup")
                        .WithMany()
                        .HasForeignKey("OrderGroupId");
                });

            modelBuilder.Entity("Livis.Market.Data.OrderGroup", b =>
                {
                    b.HasOne("Livis.Market.Data.CustomerAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Livis.Market.Data.CustomerContact", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Livis.Market.Data.Product", b =>
                {
                    b.HasOne("Livis.Market.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Livis.Market.Data.LevisUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhoto", b =>
                {
                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhotoForPartner", b =>
                {
                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("PartnerPhotos")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Livis.Market.Data.Store", b =>
                {
                    b.HasOne("Livis.Market.Data.CustomerContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Livis.Market.Data.LevisUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Livis.Market.Data.StoreProduct", b =>
                {
                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Livis.Market.Data.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Livis.Market.Data.OrderFormFederatedPayment", b =>
                {
                    b.HasOne("Livis.Market.Data.Party", "BillingParty")
                        .WithMany()
                        .HasForeignKey("BillingPartyPartyId");
                });
#pragma warning restore 612, 618
        }
    }
}
