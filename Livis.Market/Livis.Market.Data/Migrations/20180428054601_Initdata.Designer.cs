// <auto-generated />
using Livis.Market.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Livis.Market.Data.Migrations
{
    [DbContext(typeof(LivisMarketContext))]
    [Migration("20180428054601_Initdata")]
    partial class Initdata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Livis.Market.Data.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemCount");

                    b.Property<string>("ShopName");

                    b.Property<decimal>("Totals");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Livis.Market.Data.CartLine", b =>
                {
                    b.Property<Guid>("CartLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CartId");

                    b.Property<string>("ItemId");

                    b.Property<string>("ParentId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("Totals");

                    b.Property<decimal>("UnitListPrice");

                    b.HasKey("CartLineId");

                    b.HasIndex("CartId");

                    b.ToTable("CartLines");
                });

            modelBuilder.Entity("Livis.Market.Data.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Livis.Market.Data.CustomerAddress", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressType");

                    b.Property<string>("CityOrTownOrVillage")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ContactId");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(64);

                    b.Property<string>("CountryName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("ModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PostCode")
                        .HasMaxLength(64);

                    b.Property<string>("StreetAndHouseNumber")
                        .HasMaxLength(64);

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Livis.Market.Data.CustomerContact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("CreatorId");

                    b.Property<int?>("CustomerGroup");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime?>("LastOrder");

                    b.Property<string>("MobileMailAddress")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("ModifierId");

                    b.Property<string>("OwnerId");

                    b.Property<Guid?>("PreferredBillingAddressId");

                    b.Property<string>("PreferredCurrency")
                        .HasMaxLength(10);

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10);

                    b.Property<Guid?>("PreferredShippingAddressId");

                    b.HasKey("ContactId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PreferredBillingAddressId");

                    b.HasIndex("PreferredShippingAddressId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Livis.Market.Data.LevisUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsPowerUser");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Livis.Market.Data.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Total");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Livis.Market.Data.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quality");

                    b.Property<decimal>("Total");

                    b.Property<string>("VariantId");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Livis.Market.Data.Party", b =>
                {
                    b.Property<Guid>("PartyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("AddressName");

                    b.Property<string>("City")
                        .HasMaxLength(64);

                    b.Property<string>("Country");

                    b.Property<string>("CountryCode");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("LastName");

                    b.Property<string>("Organization");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State");

                    b.Property<string>("StateCode");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Livis.Market.Data.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Payment");
                });

            modelBuilder.Entity("Livis.Market.Data.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoryId");

                    b.Property<decimal>("Cost");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Height");

                    b.Property<decimal?>("Length");

                    b.Property<string>("Name");

                    b.Property<string>("OriginalLinks");

                    b.Property<string>("Resources");

                    b.Property<string>("Sku");

                    b.Property<decimal>("SuggestedPrice");

                    b.Property<string>("UserId");

                    b.Property<string>("VariantKeys");

                    b.Property<string>("VariantOptions");

                    b.Property<string>("Videos");

                    b.Property<decimal?>("Weight");

                    b.Property<decimal?>("Width");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhoto", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlobUrl");

                    b.Property<Guid?>("ProductId");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhoto");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhotoForPartner", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlobUrl");

                    b.Property<Guid?>("ProductId");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotoForPartner");
                });

            modelBuilder.Entity("Livis.Market.Data.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContactId");

                    b.Property<string>("Description");

                    b.Property<string>("StoreName");

                    b.Property<string>("UserId");

                    b.HasKey("StoreId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Livis.Market.Data.StoreProduct", b =>
                {
                    b.Property<Guid>("StoreId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("StoreProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Livis.Market.Data.FederatedPayment", b =>
                {
                    b.HasBaseType("Livis.Market.Data.Payment");

                    b.Property<Guid?>("BillingPartyPartyId");

                    b.Property<string>("CardType");

                    b.Property<Guid?>("CartId");

                    b.Property<string>("EscrowId");

                    b.Property<int>("ExpiresMonth");

                    b.Property<int>("ExpiresYear");

                    b.Property<string>("MaskedNumber");

                    b.Property<string>("PaymentMethodNonce");

                    b.Property<string>("TransactionId");

                    b.Property<string>("TransactionStatus");

                    b.HasIndex("BillingPartyPartyId");

                    b.HasIndex("CartId");

                    b.ToTable("FederatedPayment");

                    b.HasDiscriminator().HasValue("FederatedPayment");
                });

            modelBuilder.Entity("Livis.Market.Data.CartLine", b =>
                {
                    b.HasOne("Livis.Market.Data.Cart")
                        .WithMany("Lines")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("Livis.Market.Data.CustomerContact", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser", "User")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Livis.Market.Data.CustomerAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("PreferredBillingAddressId");

                    b.HasOne("Livis.Market.Data.CustomerAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("PreferredShippingAddressId");
                });

            modelBuilder.Entity("Livis.Market.Data.Order", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Livis.Market.Data.OrderItem", b =>
                {
                    b.HasOne("Livis.Market.Data.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Livis.Market.Data.Product", b =>
                {
                    b.HasOne("Livis.Market.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Livis.Market.Data.LevisUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhoto", b =>
                {
                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Livis.Market.Data.ProductPhotoForPartner", b =>
                {
                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("PartnerPhotos")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Livis.Market.Data.Store", b =>
                {
                    b.HasOne("Livis.Market.Data.CustomerContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Livis.Market.Data.LevisUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Livis.Market.Data.StoreProduct", b =>
                {
                    b.HasOne("Livis.Market.Data.Product", "Product")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Livis.Market.Data.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Livis.Market.Data.LevisUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Livis.Market.Data.FederatedPayment", b =>
                {
                    b.HasOne("Livis.Market.Data.Party", "BillingParty")
                        .WithMany()
                        .HasForeignKey("BillingPartyPartyId");

                    b.HasOne("Livis.Market.Data.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId");
                });
#pragma warning restore 612, 618
        }
    }
}
